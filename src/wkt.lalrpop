// Document: Simple Feature Access - Part 1: Common Architecture
// Version: 1.2.1
// Document #: 06-103r4
// Sections: 7.2

use std::str::FromStr;
use ::Geometry as New;
use {
    PointType,
    LineStringType,
    PolygonType,
    MultiPointType,
    PolyhedralSurfaceType,
    MultiLineStringType,
    MultiPolygonType,
    GeometryCollectionType,
};

// TODO: case insensitivity

grammar;

//FIXME: https://github.com/nikomatsakis/lalrpop/issues/97
//FIXME: closely follow spec here
//Float: f64 = r"[+-]?([0-9]+(.[0-9]*)?|.[0-9]+)([eE][+-]?[0-9]+)?" => f64::from_str(<>).unwrap();
Float: f64 = r"[+-0123456789eE.]+" => f64::from_str(<>).unwrap();

// FIXME: whitespace around comma should be optional
Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> =>
        h.into_iter().chain(t).collect()
};

Point: (f64, f64) = <x:Float> <y:Float> => (x, y);

pub GeometryTaggedText = {
    PointTaggedText,
    LineStringTaggedText,
    PolygonTaggedText,
    TriangleTaggedText,
    PolyhedralSurfaceTaggedText,
    TinTaggedText,
    MultiPointTaggedText,
    MultiLineStringTaggedText,
    MultiPolygonTaggedText,
    GeometryCollectionTaggedText,
};

PointTaggedText: New =
    "POINT" <n:PointText> => New::Point(n);

LineStringTaggedText: New =
    "LINESTRING" <n:LineStringText> => New::LineString(n);

PolygonTaggedText: New =
    "POLYGON" <n:PolygonText> => New::Polygon(n);

PolyhedralSurfaceTaggedText: New =
    "POLYHEDRALSURFACE" <n:PolyhedralSurfaceText> => New::PolyhedralSurface(n);

TriangleTaggedText: New =
    "TRIANGLE" <n:PolygonText> => New::Triangle(n);

TinTaggedText: New =
    "TIN" <n:PolyhedralSurfaceText> => New::Tin(n);

MultiPointTaggedText: New =
    "MULTIPOINT" <n:MultiPointText> => New::MultiPoint(n);

MultiLineStringTaggedText: New =
    "MULTILINESTRING" <n:MultiLineStringText> => New::MultiLineString(n);

MultiPolygonTaggedText: New =
    "MULTIPOLYGON" <n:MultiPolygonText> => New::MultiPolygon(n);

GeometryCollectionTaggedText: New =
    "GEOMETRYCOLLECTION" <n:GeometryCollectionText> => New::GeometryCollection(n);

PointText: PointType = {
    "EMPTY" => None,
    "(" <n:Point> ")" => Some(n),
};

LineStringText: LineStringType = {
    "EMPTY" => vec![],
    "(" <n:Comma<Point>> ")" => n,
};

PolygonText: PolygonType = {
    "EMPTY" => vec![],
    "(" <n:Comma<LineStringText>> ")" => n,
};

PolyhedralSurfaceText: PolyhedralSurfaceType = {
    "EMPTY" => vec![],
    "(" <n:Comma<PolygonText>> ")" => n,
};

MultiPointText: MultiPointType = {
    "EMPTY" => vec![],
    "(" <n:Comma<PointText>> ")" => n,
};

MultiLineStringText: MultiLineStringType = {
    "EMPTY" => vec![],
    "(" <n:Comma<LineStringText>> ")" => n,
};

MultiPolygonText: MultiPolygonType = {
    "EMPTY" => vec![],
    "(" <n:Comma<PolygonText>> ")" => n,
};

GeometryCollectionText: GeometryCollectionType = {
    "EMPTY" => vec![],
    "(" <n:Comma<GeometryTaggedText>> ")" => n,
};
