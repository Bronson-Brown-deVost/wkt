// http://svn.osgeo.org/postgis/trunk/doc/bnf-wkt.txt

use std::str::FromStr;
use ::New;
use {PointType, LineStringType, CircularStringType, PolygonType, MultiPointType};

grammar;

//FIXME: https://github.com/nikomatsakis/lalrpop/issues/97
//Float: f64 = r"[+-]?([0-9]+(.[0-9]*)?|.[0-9]+)([eE][+-]?[0-9]+)?" => f64::from_str(<>).unwrap();

Float: f64 = r"[+-0-9eE.]+" => f64::from_str(<>).unwrap();

Comma<T>: Vec<T> = {
    <h:(<T> ",")*> <t:T?> =>
        h.into_iter().chain(t).collect()
};

pub WellKnownTextRepresentation = {
    PointTextRepresentation,
    CurveTextRepresentation,
    SurfaceTextRepresentation,
    CollectionTextRepresentation,
};

PointTextRepresentation: New = "POINT" <n:PointText> => New::Point(n);

////// DONE /////////

CurveTextRepresentation: New = {
    <LineStringTextRepresentation> => New::LineString(<>),
    <CircularStringTextRepresentation> => New::CircularString(<>),
};

LineStringTextRepresentation = "LINESTRING" <LineStringTextBody>;

CircularStringTextRepresentation = "CIRCULARSTRING" <CircularStringText>;

SurfaceTextRepresentation = CurvePolygonTextRepresentation;

CurvePolygonTextRepresentation: New = {
    <PolygonTextRepresentation> => New::Polygon(<>),
};

PolygonTextRepresentation = "POLYGON" <PolygonTextBody>;

CollectionTextRepresentation: New = {
    MultiPointTextRepresentation => New::Curve(<>),
    GeometryCollectionTextRepresentation => New::Collection(<>),
};

MultiPointTextRepresentation = "MULTIPOINT" <MultiPointText>;

GeometryCollectionTextRepresentation =
    "GEOMETRYCOLLECTION" <GeometryCollectionText>;

LineStringTextBody = LineStringText;

PolygonTextBody = PolygonText;

PointText: PointType = {
    "EMPTY" => None,
    "(" <n:Point> ")" => Some(n),
};

Point: (f64, f64) = <x:Float> <y:Float> => (x, y);

LineStringText: LineStringType = {
    "EMPTY" => vec![],
    "(" <n:Comma<Point>> ")" => n,
};

CircularStringText: CircularStringType = {
    "EMPTY" => vec![],
    "(" <n:Comma<Point>> ")" => n,
};

PolygonText: PolygonType = {
    "EMPTY" => vec![],
    "(" <n:Comma<LineStringText>> ")" => n,
};

MultiPointText: MultiPointType = {
    "EMPTY" => vec![],
    "(" <n:Comma<Point>> ")" => n,
};

GeometryCollectionText: Vec<New> = {
    "EMPTY" => vec![],
    "(" <n:Comma<WellKnownTextRepresentation>> ")" => n,
};
